<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="memorypool_8cuh" kind="file" language="C++">
    <compoundname>memorypool.cuh</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">//<sp/>Copyright<sp/>2024-2025<sp/>Alişah<sp/>Özcan</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0,<sp/>see<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Developer:<sp/>Alişah<sp/>Özcan</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#ifndef<sp/>HEONGPU_MEMORY_POOL_H</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>HEONGPU_MEMORY_POOL_H</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;mutex&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;memory&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;vector&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;sys/sysinfo.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;common.cuh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;nttparameters.cuh&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;defines.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;thrust/host_vector.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/device_buffer.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/device_uvector.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/mr/host/pinned_memory_resource.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/mr/host/host_memory_resource.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/mr/device/cuda_memory_resource.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/mr/device/pool_memory_resource.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/mr/device/statistics_resource_adaptor.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/mr/device/detail/stream_ordered_memory_resource.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;rmm/mr/device/logging_resource_adaptor.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>---------------------<sp/>//</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Author:<sp/>Alisah<sp/>Ozcan</highlight></codeline>
<codeline><highlight class="normal">//<sp/>---------------------<sp/>//</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MemoryPool</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>DeviceResource<sp/>=<sp/>rmm::mr::cuda_memory_resource;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>DevicePoolResource<sp/>=<sp/>rmm::mr::pool_memory_resource&lt;DeviceResource&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>DeviceStatsAdaptor<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::mr::statistics_resource_adaptor&lt;rmm::mr::device_memory_resource&gt;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>HostResource<sp/>=<sp/>rmm::mr::pinned_memory_resource;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>HostPoolResource<sp/>=<sp/>rmm::mr::pool_memory_resource&lt;HostResource&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>HostStatsAdaptor<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::mr::statistics_resource_adaptor&lt;HostPoolResource&gt;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>MemoryPool&amp;<sp/>instance();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>for<sp/>device</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>use_memory_pool(bool<sp/>use);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>for<sp/>device</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>allocate(size_t<sp/>size,<sp/>cudaStream_t<sp/>stream<sp/>=<sp/>cudaStreamDefault);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>deallocate(void*<sp/>ptr,<sp/>size_t<sp/>size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream<sp/>=<sp/>cudaStreamDefault);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rmm::mr::device_memory_resource*<sp/>get_device_resource()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HostStatsAdaptor*<sp/>get_host_resource()<sp/>const;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>print_memory_pool_status()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>get_current_device_pool_memory_usage()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>get_free_device_pool_memory()<sp/>const;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>get_current_host_pool_memory_usage()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>get_free_host_pool_memory()<sp/>const;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>~MemoryPool();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MemoryPool();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MemoryPool(const<sp/>MemoryPool&amp;)<sp/>=<sp/>delete;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MemoryPool&amp;<sp/>operator=(const<sp/>MemoryPool&amp;)<sp/>=<sp/>delete;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>clean_pool();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>get_host_avaliable_memory()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>get_decive_avaliable_memory()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>roundup_256(size_t<sp/>size)<sp/>const;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>std::shared_ptr&lt;HostResource&gt;<sp/>host_base_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>std::shared_ptr&lt;HostPoolResource&gt;<sp/>host_pool_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>std::shared_ptr&lt;HostStatsAdaptor&gt;<sp/>host_stats_adaptor_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>std::shared_ptr&lt;DeviceResource&gt;<sp/>device_base_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>std::shared_ptr&lt;DevicePoolResource&gt;<sp/>device_pool_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>std::shared_ptr&lt;DeviceStatsAdaptor&gt;<sp/>device_stats_adaptor_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>initialized_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>std::mutex<sp/>mutex_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>struct<sp/>rmm_pinned_allocator</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>HostResource<sp/>=<sp/>rmm::mr::pinned_memory_resource;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>HostPoolResource<sp/>=<sp/>rmm::mr::pool_memory_resource&lt;HostResource&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>HostStatsAdaptor<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rmm::mr::statistics_resource_adaptor&lt;HostPoolResource&gt;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rmm_pinned_allocator()<sp/>:<sp/>pool_(MemoryPool::instance().get_host_resource())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>allocate(std::size_t<sp/>n)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;T*&gt;(pool_-&gt;allocate(n<sp/>*<sp/>sizeof(T)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>deallocate(T*<sp/>p,<sp/>std::size_t<sp/>n)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool_-&gt;deallocate(p,<sp/>n<sp/>*<sp/>sizeof(T));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>operator==(const<sp/>rmm_pinned_allocator&amp;<sp/>other)<sp/>const</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pool_<sp/>==<sp/>other.pool_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>operator!=(const<sp/>rmm_pinned_allocator&amp;<sp/>other)<sp/>const</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>!(*this<sp/>==<sp/>other);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>HostStatsAdaptor*<sp/>pool_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#endif<sp/>//<sp/>HEONGPU_MEMORY_POOL_H</highlight></codeline>
    </programlisting>
    <location file="/home/alisah/Desktop/HEonGPU_DOCS/HEonGPU/src/heongpu/include/util/memorypool.cuh"/>
  </compounddef>
</doxygen>
